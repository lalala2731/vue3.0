{"version":3,"file":"reactivity.global.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reactive.ts","../src/ref.ts","../src/computed.ts"],"sourcesContent":["// const Shared = {}\r\n// export {\r\n//     Shared\r\n// }\r\n\r\nexport const isObject = target => typeof target == 'object' && target !== null\r\nexport const extend = Object.assign\r\nexport const isArray = Array.isArray\r\nexport const isFunction = value => typeof value === 'function'\r\nexport const isNumber = value => typeof value === 'number'\r\nexport const isString = value => typeof value === 'string'\r\nexport const isIntegerKey = key => parseInt(key) + '' === key\r\n// export const isIntegerKey = key => {\r\n//     console.log('sss');\r\n//     return parseInt(key) + '' === key\r\n\r\n// }\r\nexport const isSymbol = key => typeof key === 'symbol'\r\nlet hasOwnProperty = Object.prototype.hasOwnProperty\r\nexport const hasOwn = (target, key) => hasOwnProperty.call(target, key)\r\n\r\nexport const hasChanged = (OldValue, value) => OldValue !== value\r\nexport * from './shapeFlags'\r\n","\r\n// effect是一个函数\r\n//effect用法：effect(()=>{\r\n// console.log('ok');\r\n// }) \r\n\r\nimport { isArray, isIntegerKey } from \"@vue/shared\"\r\nimport { TriggerOrTypes } from \"./operators\"\r\n\r\nexport function effect(fn, options: any = {}) {\r\n    // 需要让此effect变成响应的effect，可以做到数据变化重新执行\r\n\r\n    const effect = createReactiveEffect(fn, options)\r\n\r\n\r\n    if (!options.lazy) {// 默认的effect会先执行\r\n        effect()// 响应式的effect默认会先执行一次\r\n    }\r\n\r\n\r\n    return effect\r\n}\r\n\r\nlet uid = 0\r\nlet activeEffect // 存储当前的effect，为了让track里能拿到当前的effect\r\nconst effectStack = []\r\n\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect() {\r\n        // 保证effect没有加入到effectStack中，防止死循环\r\n        if (!effectStack.includes(effect)) {\r\n\r\n            // 清理\r\n            try {\r\n                effectStack.push(effect) // 入栈\r\n                activeEffect = effect\r\n                return fn()// 函数执行时会取值 执行get方法 --有返回值--\r\n            } finally {// 不需要处理异常\r\n                effectStack.pop()// 方法执行完就出栈\r\n                activeEffect = effectStack[effectStack.length - 1]// 正确的依赖\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    effect.id = uid++// 制作一个effect标识，用于区分effect，后续组件更新需要\r\n    effect._isEffect = true// 用于标识这个是 响应式effect\r\n    effect.raw = fn// 保留effect对应的原函数\r\n    effect.options = options// 在effect上保存用户的属性\r\n\r\n    return effect\r\n}\r\n\r\n// 让某个对象中的属性 收集当前它对应的effect函数\r\nconst targetMap = new WeakMap()\r\nexport function track(target, type, key) {// type:TrackOpTypes.GET --> 0\r\n    // activeEffect//当前对应的effect\r\n    // console.log(target,key);\r\n    if (activeEffect === undefined) { // 如果这个没有activeEffect，说明不是effect里的\r\n        // 比如effect页面用到了state.arr,后面改了arr的length，默认就会收集到length，但是effect里是没有用到的\r\n        // 只是为了实现所需要的。详情见文档里的依赖收集\r\n        // console.log('meiyou',target,key);\r\n        return\r\n    }\r\n\r\n    // 让对象中的属性和它的effect函数对应起来 一个属性可能有多个effect函数,所以用集合set\r\n\r\n    // 哪个对象的哪个属性对应的effect\r\n    // WeakMap key:{name:jack,age:18} value:(map) {name => set,,age => set}\r\n    let depsMap = targetMap.get(target)// map\r\n    if (!depsMap) {\r\n        targetMap.set(target, (depsMap = new Map()))\r\n    }\r\n    let dep = depsMap.get(key)// set\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = new Set()))\r\n    }\r\n    if (!dep.has(activeEffect)) {// 往里面加effect函数\r\n        dep.add(activeEffect)\r\n    }\r\n// console.log(target,key,targetMap);\r\n\r\n\r\n\r\n}\r\n// 找属性对应的effect，让其执行（只考虑了数组和对象，还有Map和Set）\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {// ?表示可有可无\r\n    // console.log(target, type, key, newValue, oldValue);\r\n    \r\n    // 如果这个属性没有收集过effect，那不需要做任何操作\r\n    // 因为如果没有effect，说明在页面的effect函数中没有用到过这个属性\r\n    const depsMap = targetMap.get(target)\r\n    if (!depsMap) {\r\n        return\r\n    }\r\n\r\n    const add = effectsToAdd => {\r\n        if (effectsToAdd) {\r\n            // 一个个加到effect数组中去 arr[2]和arr.length都是arr的effect函数\r\n            effectsToAdd.forEach(effect => effects.add(effect))\r\n        }\r\n    }\r\n\r\n    // 将所有的要执行的effect全部存到一个新的集合中，最终一起执行\r\n    const effects = new Set()// 去重,为的是页面同时使用比如arr[2]和arr.length的时候，这时他俩的effect函数是同一个，\r\n    // 或者state.name 和state.age。\r\n    // 其实不管是谁对应啥effect，一种effect只需要触发一次，但是一个effect里会有很多的属性收集它，所以需要set去重\r\n    // 应该只触发一次\r\n    // 其实，像页面更改的时候也需要去重（节流？）\r\n\r\n    // 1.看修改的是不是数组的长度，因为改长度影响比较大\r\n    // 比如用到了arr[3]，但是后面又将arr.length=1\r\n    if (key === 'length' && isArray(target)) {\r\n\r\n        // 如果对应的长度有依赖需要更新\r\n        depsMap.forEach((dep, key) => {\r\n\r\n            // 走到这说明effect函数中已经用到arr.length了，所以必有key为'length'的effect\r\n            // 比如用的是arr[2],后面修改为arr.length=1 2 > 1 \r\n            // 第一个条件的修改可能是扩大数组也可能是缩减数组\r\n            if (key === 'length' || key > newValue) { // 如果更改的长度小于收集的索引，则修改的索引也要触发effect重新执行\r\n                add(dep)\r\n            }\r\n\r\n\r\n            // // 最后让effects中的effect都执行\r\n            // effects.forEach((effect: any) => effect())\r\n        })\r\n    } else {\r\n\r\n        // 可能是对象(或者是改数组的某个索引的值)\r\n        if (key !== undefined) {// 这里一定是修改(页面用到才会收集依赖,而在set方法中已经set过了)\r\n            \r\n            add(depsMap.get(key))// 如果是新增，就是空的丢进去，因为页面没有用到，不需要再触发\r\n            // 如果页面用到了arr，但是后面如果修改了arr的某一项（未改变数组长度），也会走这里\r\n            // 因为track的时候会收集每一项\r\n        }\r\n        // 如果修改数组中的某一个索引 比如effect中用到的是arr，但是更改的是arr[100]=1,\r\n        // 相当于改变了数组的长度\r\n        switch (type) { //如果添加了一个索引，就触发长度的更新(比如effect中放的是arr，但是后面改arr[100]=1)\r\n            case TriggerOrTypes.ADD:\r\n                if (isArray(target) && isIntegerKey(key)) {\r\n                    add(depsMap.get('length'))// 因为页面effect即使是arr,也会记录arr.length的effect，所以就吧'length'丢进去触发\r\n                    // console.log(target,key,type,newValue,oldValue);\r\n                    \r\n                }\r\n        }\r\n    }\r\n\r\n    // 最后让effects中的effect都执行\r\n    effects.forEach((effect: any) => {\r\n        if (effect.options.scheduler) {\r\n            effect.options.scheduler(effect)\r\n        } else {\r\n            effect()\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n 全局变量隐患：////执行顺序effect1执行，effect函数进栈，fn1函数执行，\r\n                // 新的effect2执行，进栈，fn2执行，effect2出栈，现effect为effect1，继续执行\r\n情况一：\r\n effect(()=>{\r\n    state.name --> effect1\r\n    effect(()=>{\r\n        state.age -->effect2\r\n    })\r\n    state.address -->此时为effect2\r\n    解决方法：设计一个栈结构，方法执行完就出栈，取栈的最后一个\r\n    保证收集的是正确的effect\r\n })\r\n\r\n情况二：\r\n effect(()=>{\r\n    state.xx ++ // 出现死循环 effect先执行一次读取到state.xx,收集依赖，state.xx ++,set函数触发依赖，effect再执行，\r\n                // fn执行，再读状态，收集依赖，状态再次改变 --->死循环\r\n })\r\n\r\n */","\r\n// 用于实现 new Proxy(target,handler)\r\n\r\nimport { extend, hasChanged, hasOwn, isArray, isIntegerKey, isObject, isSymbol } from \"@vue/shared\"\r\nimport { reactive, readonly } from \".\"\r\nimport { track, trigger } from \"./effect\"\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\"\r\n\r\n// 考虑是不是仅读的 仅读的属性set时会报错\r\n// 考虑是不是深度的\r\n\r\n// 拦截获取功能\r\nfunction createGetter(isReadyonly = false, shallow = false) {\r\n    return function get(target, key, receiver) { //receiver:代理对象，谁调用Proxy就是谁 let proxy=new Proxy()\r\n        // console.log(target,key);\r\n        \r\n        // Proxy + reflect 反射\r\n        // 后续Object上的方法会被迁移到Reflect上 如：Reflect.getProptypeof()\r\n        // 以前target[key] = value 方式设置值可能会失败，并不会报错，也没有返回值标识\r\n        // Reflect方法具备返回值\r\n        // Reflect 使用可以不使用proxy es6语法\r\n\r\n        const res = Reflect.get(target, key, receiver)//等价于target[key]\r\n\r\n        if(isSymbol(key)) return res\r\n\r\n        if (!isReadyonly) {\r\n            // 收集依赖，等数据变化后更新对应的视图\r\n            \r\n            track(target, TrackOpTypes.GET, key)\r\n        }\r\n        if (shallow) {// 如果是浅的，就直接取出来返回\r\n            return res\r\n        }\r\n        if (isObject(res)) {// 如果是对象，根据是否只读，返回包装后的值\r\n            // vue2一开始就递归，vue3是取值时会进行代理\r\n            // vue3的代理模式称为懒代理\r\n\r\n            return isReadyonly ? readonly(res) : reactive(res)\r\n        }\r\n\r\n\r\n        return res\r\n\r\n    }\r\n}\r\n\r\n// 拦截设置功能\r\nfunction createSetter(shallow = false) {\r\n    return function set(target, key, value, receiver) {\r\n        \r\n        const oldValue = target[key] //获取老的值\r\n        // 1.新增2.修改3.修改，但是老值与新值相同\r\n        \r\n        // 判断有没有这个属性\r\n        // 即使是push方法，也会修改索引，也会有数字key，也可以判断\r\n        // debugger\r\n        let hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key)\r\n        \r\n        const result = Reflect.set(target, key, value, receiver) //等价于target[key]=value\r\n        // 当数据更新时，通知对应属性的effect重新执行\r\n        // 我们要区分的是新增的还是修改的 vue2中无法监控更改索引，无法监控数组的长度变化\r\n        // 需要hack的方法 特殊处理\r\n        if (!hadKey) {\r\n            // 新增\r\n            \r\n            trigger(target, TriggerOrTypes.ADD, key, value) // trigger函数就是让相应的的effect函数执行\r\n        } else if (hasChanged(oldValue, value)) {\r\n            // 修改\r\n            trigger(target, TriggerOrTypes.SET, key, value, oldValue)\r\n        }\r\n\r\n        return result\r\n    }\r\n}\r\n\r\n// 与之前一样，使用一个函数 传入不同的参数实现处理不同的逻辑\r\nconst get = createGetter()\r\nconst shallowGet = createGetter(false, true)\r\nconst readonlyGet = createGetter(true)\r\nconst shallowReadonlyGet = createGetter(true, true)\r\n\r\nconst set = createSetter()\r\nconst shallowSet = createSetter(true)\r\n\r\nexport const mutableHandlers = {\r\n    get,\r\n    set\r\n}\r\nexport const shallowReactiveHandlers = {\r\n    get: shallowGet,\r\n    set: shallowSet\r\n}\r\n\r\n// readonly和 shallowReadonly都用得到，抽离出来\r\nlet readonlyObj = {\r\n    set: (target, key) => {\r\n        console.warn(`set on key: ${key} failed,${target} is readonly`)\r\n    }\r\n}\r\n\r\nexport const readonlyHandlers = extend({\r\n    get: readonlyGet\r\n}, readonlyObj)\r\nexport const shallowReadonlyHandlers = extend({\r\n    get: shallowReadonlyGet\r\n}, readonlyObj)","import { isObject } from \"@vue/shared\"\r\nimport {\r\n    mutableHandlers,\r\n    shallowReactiveHandlers,\r\n    readonlyHandlers,\r\n    shallowReadonlyHandlers\r\n} from './baseHandlers'\r\n\r\n// reactive.ts只处理响应式，其余的放到各自的功能文件中处理\r\n// const mutableHandlers={}\r\n// const shallowReactiveHandlers={}\r\n// const readonlyHandlers={}\r\n// const shallowReadonlyHandlers={}\r\n\r\nexport function reactive(target) {\r\n    return createReactiveObject(target, false, mutableHandlers)\r\n}\r\n\r\nexport function shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers)\r\n}\r\n\r\nexport function readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers)\r\n}\r\n\r\nexport function shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers)\r\n}\r\n\r\n// 四个方法的区别仅为 是不是深度 是不是仅读 \r\n// 想通过一个方法通过传入不同的参数处理不同的逻辑 柯里化\r\n// 最核心的是 拦截数据的获取和修改（get set） 与new Proxy相似\r\n\r\n// 建立映射表 存储已经被代理过的对象\r\nconst reactiveMap = new WeakMap() //会自动垃圾回收，不会造成内存泄漏 存储的key只能是对象\r\nconst readonlyMap = new WeakMap()\r\n\r\n\r\nexport function createReactiveObject(target, isReadonly, baseHandlers) {\r\n    // 如果目标不是对象，没法拦截了，reactive只能拦截对象类型\r\n    if (!isObject(target)) {\r\n        return target\r\n    }\r\n    // 如果某个对象已经被代理过了，就不要再代理了，所以做了一个映射表\r\n    // 可能一个对象既被深度代理 又被仅读代理\r\n\r\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap\r\n\r\n    const existProxy = proxyMap.get(target)\r\n    if (existProxy) {\r\n        return existProxy// 如果已经被代理了，直接返回即可\r\n    }\r\n\r\n    const proxy = new Proxy(target, baseHandlers)\r\n    proxyMap.set(target, proxy) //将要代理的对象和对应代理结果缓存起来\r\n\r\n    return proxy\r\n}\r\n\r\n// 如果let p=new Proxy()\r\n// let p1=new Proxy(p)// 应该在设置值的时候做校验或者避免写出这种代码\r\n","import { hasChanged, isArray, isObject } from \"@vue/shared\"\r\nimport { reactive } from \".\"\r\nimport { track, trigger } from \"./effect\"\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\"\r\n\r\n// 返回的是一个实例\r\nexport function ref(value) {\r\n    // 将普通对象变成一个对象，可以是对象，但一般情况下对象直接使用reactive更合理\r\n    return createRef(value)\r\n\r\n}\r\n// ref和reactive的区别，reactive内部采用proxy，ref中内部使用defineProperty\r\n\r\nexport function shallowRef(value) {\r\n    return createRef(value, true)\r\n}\r\n\r\n\r\nconst convert = val => isObject(val) ? reactive(val) : val\r\n// beta版本之前的版本ref就是个对象，由于对象不方便扩展，改成了类\r\nclass RefImpl {\r\n    public _value //表示声明了一个_value属性，并未赋值\r\n    public readonly __v_isRef = true//产生的实例会被添加 __v_isRef 表示是一个ref属性\r\n    constructor(public rawValue, public shallow) { // 参数前面增加修饰符，标识此属性放到了实例上，既声明又赋值\r\n        // 如果是深度的，需要把里面的都变成响应式的\r\n        this._value = shallow ? rawValue : convert(rawValue)\r\n    }\r\n    // 类的属性访问器 名字是value，就会在实例上加一个value属性（数据劫持属性的）\r\n    // 属性访问器转换为es5就是Object.defineProperty\r\n    get value() { //数据代理 取值取value，会代理到_value\r\n        // (effect中)用到的时候收集依赖\r\n        track(this, TrackOpTypes.GET, 'value')\r\n        return this._value\r\n    }\r\n    set value(newValue) {\r\n        if (hasChanged(this.rawValue, newValue)) {// 判断老值和新值是否有变化\r\n            this.rawValue = newValue// 因为比较的是rawValue和newValue\r\n            this._value = this.rawValue ? newValue : convert(newValue)\r\n            trigger(this, TriggerOrTypes.SET, 'value', newValue)\r\n        }\r\n    }\r\n}\r\n\r\n// 源码基本使用高阶函数，做类似柯里化的功能\r\nfunction createRef(rawValue, shallow = false) {\r\n    return new RefImpl(rawValue, shallow)\r\n}\r\n\r\nclass ObjectRefImpl {\r\n    public __v_isRef = true\r\n    constructor(public target, public key) { }\r\n    get value() {//不做依赖收集，依靠源对象实现是否响应收集\r\n        // 只是一个reactive的解构\r\n        // 如果源对象是响应式的，就会触发更新\r\n        return this.target[this.key]\r\n    }\r\n    set value(newValue) {\r\n        this.target[this.key] = newValue\r\n    }\r\n}\r\n\r\n// 将某一个key对应的值转化成ref\r\nexport function toRef(target, key) {\r\n    // 可以把一个对象的值转换成ref类型\r\n    return new ObjectRefImpl(target, key)\r\n}\r\n\r\n\r\nexport function toRefs(object) {//object可能是一个数组或者对象\r\n    const ret = isArray(object) ? new Array(object.length) : {}\r\n    for (let key in object) {\r\n        ret[key]=toRef(object,key)\r\n    }\r\n    return ret\r\n}\r\n","import { isFunction } from \"@vue/shared\"\r\nimport { effect } from \".\"\r\nimport { track, trigger } from \"./effect\"\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\"\r\n\r\n// 就是原值改变，计算属性下次也要重新计算，所以在计算属性里面也要进行依赖收集，当原值改变时，会触发effect\r\n// 那么就会走effect收集的scheduler，就会执行相应计算属性的trigger\r\nclass ComputedRefImpl {\r\n    private _dirty = true // 默认取值时不要用缓存\r\n\r\n    public _value\r\n    public effect\r\n    constructor(getter, public setter) { // ts默认不会挂载到this上\r\n        this.effect = effect(getter, {\r\n            lazy: true, // 默认不执行\r\n            scheduler: () => {\r\n                if (!this._dirty) {\r\n                    this._dirty = true\r\n                    trigger(this, TriggerOrTypes.SET, 'value')// 情景1// 修改值会触发原值的effect，然后原值的effect会触发所在的scheduler，就会触发自己的trigger\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    get value() {// 计算属性中也需要收集依赖（2中不会）\r\n        if (this._dirty) {// 取值的时候（maValue.value）才会执行effect\r\n            // console.log('runner');\r\n\r\n            this._value = this.effect()\r\n            this._dirty = false// 变成false，再次取值的时候（myValue.value）不执行effect 缓存\r\n        }\r\n\r\n        track(this, TrackOpTypes.GET, 'value') // 情景1\r\n        return this._value\r\n    }\r\n    set value(newValue) {\r\n        this.setter(newValue) // myValue.value = xx(myValue = computed({get,set}))\r\n    }\r\n}\r\n\r\n// vue3的computed原理与vue2不同\r\nexport function computed(getterOrOptions) {\r\n    let getter\r\n    let setter\r\n\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions\r\n        setter = () => {\r\n            console.warn('computed value must be readonly')\r\n        }\r\n    } else {\r\n        getter = getterOrOptions.get\r\n        setter = getterOrOptions.set\r\n    }\r\n\r\n    return new ComputedRefImpl(getter, setter)\r\n}"],"names":[],"mappings":"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"}