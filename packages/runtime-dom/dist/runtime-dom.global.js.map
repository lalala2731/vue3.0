{"version":3,"file":"runtime-dom.global.js","sources":["../../shared/src/index.ts","../../reactivity/src/effect.ts","../../reactivity/src/baseHandlers.ts","../../reactivity/src/reactive.ts","../../reactivity/src/ref.ts","../../reactivity/src/computed.ts","../../runtime-core/src/vnode.ts","../../runtime-core/src/apiCreateApp.ts","../../runtime-core/src/componentPublicInstance.ts","../../runtime-core/src/component.ts","../../runtime-core/src/scheduler.ts","../../runtime-core/src/getSequence.ts","../../runtime-core/src/renderer.ts","../../runtime-core/src/h.ts","../src/nodeOps.ts","../src/modules/attr.ts","../src/modules/class.ts","../src/modules/events.ts","../src/modules/style.ts","../src/patchProps.ts","../src/index.ts"],"sourcesContent":["// const Shared = {}\r\n// export {\r\n//     Shared\r\n// }\r\n\r\nexport const isObject = target => typeof target == 'object' && target !== null\r\nexport const extend = Object.assign\r\nexport const isArray = Array.isArray\r\nexport const isFunction = value => typeof value === 'function'\r\nexport const isNumber = value => typeof value === 'number'\r\nexport const isString = value => typeof value === 'string'\r\nexport const isIntegerKey = key => parseInt(key) + '' === key\r\n// export const isIntegerKey = key => {\r\n//     console.log('sss');\r\n//     return parseInt(key) + '' === key\r\n\r\n// }\r\nexport const isSymbol = key => typeof key === 'symbol'\r\nlet hasOwnProperty = Object.prototype.hasOwnProperty\r\nexport const hasOwn = (target, key) => hasOwnProperty.call(target, key)\r\n\r\nexport const hasChanged = (OldValue, value) => OldValue !== value\r\nexport * from './shapeFlags'\r\n","\r\n// effect是一个函数\r\n//effect用法：effect(()=>{\r\n// console.log('ok');\r\n// }) \r\n\r\nimport { isArray, isIntegerKey } from \"@vue/shared\"\r\nimport { TriggerOrTypes } from \"./operators\"\r\n\r\nexport function effect(fn, options: any = {}) {\r\n    // 需要让此effect变成响应的effect，可以做到数据变化重新执行\r\n\r\n    const effect = createReactiveEffect(fn, options)\r\n\r\n\r\n    if (!options.lazy) {// 默认的effect会先执行\r\n        effect()// 响应式的effect默认会先执行一次\r\n    }\r\n\r\n\r\n    return effect\r\n}\r\n\r\nlet uid = 0\r\nlet activeEffect // 存储当前的effect，为了让track里能拿到当前的effect\r\nconst effectStack = []\r\n\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect() {\r\n        // 保证effect没有加入到effectStack中，防止死循环\r\n        if (!effectStack.includes(effect)) {\r\n\r\n            // 清理\r\n            try {\r\n                effectStack.push(effect) // 入栈\r\n                activeEffect = effect\r\n                return fn()// 函数执行时会取值 执行get方法 --有返回值--\r\n            } finally {// 不需要处理异常\r\n                effectStack.pop()// 方法执行完就出栈\r\n                activeEffect = effectStack[effectStack.length - 1]// 正确的依赖\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    effect.id = uid++// 制作一个effect标识，用于区分effect，后续组件更新需要\r\n    effect._isEffect = true// 用于标识这个是 响应式effect\r\n    effect.raw = fn// 保留effect对应的原函数\r\n    effect.options = options// 在effect上保存用户的属性\r\n\r\n    return effect\r\n}\r\n\r\n// 让某个对象中的属性 收集当前它对应的effect函数\r\nconst targetMap = new WeakMap()\r\nexport function track(target, type, key) {// type:TrackOpTypes.GET --> 0\r\n    // activeEffect//当前对应的effect\r\n    // console.log(target,key);\r\n    if (activeEffect === undefined) { // 如果这个没有activeEffect，说明不是effect里的\r\n        // 比如effect页面用到了state.arr,后面改了arr的length，默认就会收集到length，但是effect里是没有用到的\r\n        // 只是为了实现所需要的。详情见文档里的依赖收集\r\n        // console.log('meiyou',target,key);\r\n        return\r\n    }\r\n\r\n    // 让对象中的属性和它的effect函数对应起来 一个属性可能有多个effect函数,所以用集合set\r\n\r\n    // 哪个对象的哪个属性对应的effect\r\n    // WeakMap key:{name:jack,age:18} value:(map) {name => set,,age => set}\r\n    let depsMap = targetMap.get(target)// map\r\n    if (!depsMap) {\r\n        targetMap.set(target, (depsMap = new Map()))\r\n    }\r\n    let dep = depsMap.get(key)// set\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = new Set()))\r\n    }\r\n    if (!dep.has(activeEffect)) {// 往里面加effect函数\r\n        dep.add(activeEffect)\r\n    }\r\n// console.log(target,key,targetMap);\r\n\r\n\r\n\r\n}\r\n// 找属性对应的effect，让其执行（只考虑了数组和对象，还有Map和Set）\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {// ?表示可有可无\r\n    // console.log(target, type, key, newValue, oldValue);\r\n    \r\n    // 如果这个属性没有收集过effect，那不需要做任何操作\r\n    // 因为如果没有effect，说明在页面的effect函数中没有用到过这个属性\r\n    const depsMap = targetMap.get(target)\r\n    if (!depsMap) {\r\n        return\r\n    }\r\n\r\n    const add = effectsToAdd => {\r\n        if (effectsToAdd) {\r\n            // 一个个加到effect数组中去 arr[2]和arr.length都是arr的effect函数\r\n            effectsToAdd.forEach(effect => effects.add(effect))\r\n        }\r\n    }\r\n\r\n    // 将所有的要执行的effect全部存到一个新的集合中，最终一起执行\r\n    const effects = new Set()// 去重,为的是页面同时使用比如arr[2]和arr.length的时候，这时他俩的effect函数是同一个，\r\n    // 或者state.name 和state.age。\r\n    // 其实不管是谁对应啥effect，一种effect只需要触发一次，但是一个effect里会有很多的属性收集它，所以需要set去重\r\n    // 应该只触发一次\r\n    // 其实，像页面更改的时候也需要去重（节流？）\r\n\r\n    // 1.看修改的是不是数组的长度，因为改长度影响比较大\r\n    // 比如用到了arr[3]，但是后面又将arr.length=1\r\n    if (key === 'length' && isArray(target)) {\r\n\r\n        // 如果对应的长度有依赖需要更新\r\n        depsMap.forEach((dep, key) => {\r\n\r\n            // 走到这说明effect函数中已经用到arr.length了，所以必有key为'length'的effect\r\n            // 比如用的是arr[2],后面修改为arr.length=1 2 > 1 \r\n            // 第一个条件的修改可能是扩大数组也可能是缩减数组\r\n            if (key === 'length' || key > newValue) { // 如果更改的长度小于收集的索引，则修改的索引也要触发effect重新执行\r\n                add(dep)\r\n            }\r\n\r\n\r\n            // // 最后让effects中的effect都执行\r\n            // effects.forEach((effect: any) => effect())\r\n        })\r\n    } else {\r\n\r\n        // 可能是对象(或者是改数组的某个索引的值)\r\n        if (key !== undefined) {// 这里一定是修改(页面用到才会收集依赖,而在set方法中已经set过了)\r\n            \r\n            add(depsMap.get(key))// 如果是新增，就是空的丢进去，因为页面没有用到，不需要再触发\r\n            // 如果页面用到了arr，但是后面如果修改了arr的某一项（未改变数组长度），也会走这里\r\n            // 因为track的时候会收集每一项\r\n        }\r\n        // 如果修改数组中的某一个索引 比如effect中用到的是arr，但是更改的是arr[100]=1,\r\n        // 相当于改变了数组的长度\r\n        switch (type) { //如果添加了一个索引，就触发长度的更新(比如effect中放的是arr，但是后面改arr[100]=1)\r\n            case TriggerOrTypes.ADD:\r\n                if (isArray(target) && isIntegerKey(key)) {\r\n                    add(depsMap.get('length'))// 因为页面effect即使是arr,也会记录arr.length的effect，所以就吧'length'丢进去触发\r\n                    // console.log(target,key,type,newValue,oldValue);\r\n                    \r\n                }\r\n        }\r\n    }\r\n\r\n    // 最后让effects中的effect都执行\r\n    effects.forEach((effect: any) => {\r\n        if (effect.options.scheduler) {\r\n            effect.options.scheduler(effect)\r\n        } else {\r\n            effect()\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n 全局变量隐患：////执行顺序effect1执行，effect函数进栈，fn1函数执行，\r\n                // 新的effect2执行，进栈，fn2执行，effect2出栈，现effect为effect1，继续执行\r\n情况一：\r\n effect(()=>{\r\n    state.name --> effect1\r\n    effect(()=>{\r\n        state.age -->effect2\r\n    })\r\n    state.address -->此时为effect2\r\n    解决方法：设计一个栈结构，方法执行完就出栈，取栈的最后一个\r\n    保证收集的是正确的effect\r\n })\r\n\r\n情况二：\r\n effect(()=>{\r\n    state.xx ++ // 出现死循环 effect先执行一次读取到state.xx,收集依赖，state.xx ++,set函数触发依赖，effect再执行，\r\n                // fn执行，再读状态，收集依赖，状态再次改变 --->死循环\r\n })\r\n\r\n */","\r\n// 用于实现 new Proxy(target,handler)\r\n\r\nimport { extend, hasChanged, hasOwn, isArray, isIntegerKey, isObject, isSymbol } from \"@vue/shared\"\r\nimport { reactive, readonly } from \".\"\r\nimport { track, trigger } from \"./effect\"\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\"\r\n\r\n// 考虑是不是仅读的 仅读的属性set时会报错\r\n// 考虑是不是深度的\r\n\r\n// 拦截获取功能\r\nfunction createGetter(isReadyonly = false, shallow = false) {\r\n    return function get(target, key, receiver) { //receiver:代理对象，谁调用Proxy就是谁 let proxy=new Proxy()\r\n        // console.log(target,key);\r\n        \r\n        // Proxy + reflect 反射\r\n        // 后续Object上的方法会被迁移到Reflect上 如：Reflect.getProptypeof()\r\n        // 以前target[key] = value 方式设置值可能会失败，并不会报错，也没有返回值标识\r\n        // Reflect方法具备返回值\r\n        // Reflect 使用可以不使用proxy es6语法\r\n\r\n        const res = Reflect.get(target, key, receiver)//等价于target[key]\r\n\r\n        if(isSymbol(key)) return res\r\n\r\n        if (!isReadyonly) {\r\n            // 收集依赖，等数据变化后更新对应的视图\r\n            \r\n            track(target, TrackOpTypes.GET, key)\r\n        }\r\n        if (shallow) {// 如果是浅的，就直接取出来返回\r\n            return res\r\n        }\r\n        if (isObject(res)) {// 如果是对象，根据是否只读，返回包装后的值\r\n            // vue2一开始就递归，vue3是取值时会进行代理\r\n            // vue3的代理模式称为懒代理\r\n\r\n            return isReadyonly ? readonly(res) : reactive(res)\r\n        }\r\n\r\n\r\n        return res\r\n\r\n    }\r\n}\r\n\r\n// 拦截设置功能\r\nfunction createSetter(shallow = false) {\r\n    return function set(target, key, value, receiver) {\r\n        \r\n        const oldValue = target[key] //获取老的值\r\n        // 1.新增2.修改3.修改，但是老值与新值相同\r\n        \r\n        // 判断有没有这个属性\r\n        // 即使是push方法，也会修改索引，也会有数字key，也可以判断\r\n        // debugger\r\n        let hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key)\r\n        \r\n        const result = Reflect.set(target, key, value, receiver) //等价于target[key]=value\r\n        // 当数据更新时，通知对应属性的effect重新执行\r\n        // 我们要区分的是新增的还是修改的 vue2中无法监控更改索引，无法监控数组的长度变化\r\n        // 需要hack的方法 特殊处理\r\n        if (!hadKey) {\r\n            // 新增\r\n            \r\n            trigger(target, TriggerOrTypes.ADD, key, value) // trigger函数就是让相应的的effect函数执行\r\n        } else if (hasChanged(oldValue, value)) {\r\n            // 修改\r\n            trigger(target, TriggerOrTypes.SET, key, value, oldValue)\r\n        }\r\n\r\n        return result\r\n    }\r\n}\r\n\r\n// 与之前一样，使用一个函数 传入不同的参数实现处理不同的逻辑\r\nconst get = createGetter()\r\nconst shallowGet = createGetter(false, true)\r\nconst readonlyGet = createGetter(true)\r\nconst shallowReadonlyGet = createGetter(true, true)\r\n\r\nconst set = createSetter()\r\nconst shallowSet = createSetter(true)\r\n\r\nexport const mutableHandlers = {\r\n    get,\r\n    set\r\n}\r\nexport const shallowReactiveHandlers = {\r\n    get: shallowGet,\r\n    set: shallowSet\r\n}\r\n\r\n// readonly和 shallowReadonly都用得到，抽离出来\r\nlet readonlyObj = {\r\n    set: (target, key) => {\r\n        console.warn(`set on key: ${key} failed,${target} is readonly`)\r\n    }\r\n}\r\n\r\nexport const readonlyHandlers = extend({\r\n    get: readonlyGet\r\n}, readonlyObj)\r\nexport const shallowReadonlyHandlers = extend({\r\n    get: shallowReadonlyGet\r\n}, readonlyObj)","import { isObject } from \"@vue/shared\"\r\nimport {\r\n    mutableHandlers,\r\n    shallowReactiveHandlers,\r\n    readonlyHandlers,\r\n    shallowReadonlyHandlers\r\n} from './baseHandlers'\r\n\r\n// reactive.ts只处理响应式，其余的放到各自的功能文件中处理\r\n// const mutableHandlers={}\r\n// const shallowReactiveHandlers={}\r\n// const readonlyHandlers={}\r\n// const shallowReadonlyHandlers={}\r\n\r\nexport function reactive(target) {\r\n    return createReactiveObject(target, false, mutableHandlers)\r\n}\r\n\r\nexport function shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers)\r\n}\r\n\r\nexport function readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers)\r\n}\r\n\r\nexport function shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers)\r\n}\r\n\r\n// 四个方法的区别仅为 是不是深度 是不是仅读 \r\n// 想通过一个方法通过传入不同的参数处理不同的逻辑 柯里化\r\n// 最核心的是 拦截数据的获取和修改（get set） 与new Proxy相似\r\n\r\n// 建立映射表 存储已经被代理过的对象\r\nconst reactiveMap = new WeakMap() //会自动垃圾回收，不会造成内存泄漏 存储的key只能是对象\r\nconst readonlyMap = new WeakMap()\r\n\r\n\r\nexport function createReactiveObject(target, isReadonly, baseHandlers) {\r\n    // 如果目标不是对象，没法拦截了，reactive只能拦截对象类型\r\n    if (!isObject(target)) {\r\n        return target\r\n    }\r\n    // 如果某个对象已经被代理过了，就不要再代理了，所以做了一个映射表\r\n    // 可能一个对象既被深度代理 又被仅读代理\r\n\r\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap\r\n\r\n    const existProxy = proxyMap.get(target)\r\n    if (existProxy) {\r\n        return existProxy// 如果已经被代理了，直接返回即可\r\n    }\r\n\r\n    const proxy = new Proxy(target, baseHandlers)\r\n    proxyMap.set(target, proxy) //将要代理的对象和对应代理结果缓存起来\r\n\r\n    return proxy\r\n}\r\n\r\n// 如果let p=new Proxy()\r\n// let p1=new Proxy(p)// 应该在设置值的时候做校验或者避免写出这种代码\r\n","import { hasChanged, isArray, isObject } from \"@vue/shared\"\r\nimport { reactive } from \".\"\r\nimport { track, trigger } from \"./effect\"\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\"\r\n\r\n// 返回的是一个实例\r\nexport function ref(value) {\r\n    // 将普通对象变成一个对象，可以是对象，但一般情况下对象直接使用reactive更合理\r\n    return createRef(value)\r\n\r\n}\r\n// ref和reactive的区别，reactive内部采用proxy，ref中内部使用defineProperty\r\n\r\nexport function shallowRef(value) {\r\n    return createRef(value, true)\r\n}\r\n\r\n\r\nconst convert = val => isObject(val) ? reactive(val) : val\r\n// beta版本之前的版本ref就是个对象，由于对象不方便扩展，改成了类\r\nclass RefImpl {\r\n    public _value //表示声明了一个_value属性，并未赋值\r\n    public readonly __v_isRef = true//产生的实例会被添加 __v_isRef 表示是一个ref属性\r\n    constructor(public rawValue, public shallow) { // 参数前面增加修饰符，标识此属性放到了实例上，既声明又赋值\r\n        // 如果是深度的，需要把里面的都变成响应式的\r\n        this._value = shallow ? rawValue : convert(rawValue)\r\n    }\r\n    // 类的属性访问器 名字是value，就会在实例上加一个value属性（数据劫持属性的）\r\n    // 属性访问器转换为es5就是Object.defineProperty\r\n    get value() { //数据代理 取值取value，会代理到_value\r\n        // (effect中)用到的时候收集依赖\r\n        track(this, TrackOpTypes.GET, 'value')\r\n        return this._value\r\n    }\r\n    set value(newValue) {\r\n        if (hasChanged(this.rawValue, newValue)) {// 判断老值和新值是否有变化\r\n            this.rawValue = newValue// 因为比较的是rawValue和newValue\r\n            this._value = this.rawValue ? newValue : convert(newValue)\r\n            trigger(this, TriggerOrTypes.SET, 'value', newValue)\r\n        }\r\n    }\r\n}\r\n\r\n// 源码基本使用高阶函数，做类似柯里化的功能\r\nfunction createRef(rawValue, shallow = false) {\r\n    return new RefImpl(rawValue, shallow)\r\n}\r\n\r\nclass ObjectRefImpl {\r\n    public __v_isRef = true\r\n    constructor(public target, public key) { }\r\n    get value() {//不做依赖收集，依靠源对象实现是否响应收集\r\n        // 只是一个reactive的解构\r\n        // 如果源对象是响应式的，就会触发更新\r\n        return this.target[this.key]\r\n    }\r\n    set value(newValue) {\r\n        this.target[this.key] = newValue\r\n    }\r\n}\r\n\r\n// 将某一个key对应的值转化成ref\r\nexport function toRef(target, key) {\r\n    // 可以把一个对象的值转换成ref类型\r\n    return new ObjectRefImpl(target, key)\r\n}\r\n\r\n\r\nexport function toRefs(object) {//object可能是一个数组或者对象\r\n    const ret = isArray(object) ? new Array(object.length) : {}\r\n    for (let key in object) {\r\n        ret[key]=toRef(object,key)\r\n    }\r\n    return ret\r\n}\r\n","import { isFunction } from \"@vue/shared\"\r\nimport { effect } from \".\"\r\nimport { track, trigger } from \"./effect\"\r\nimport { TrackOpTypes, TriggerOrTypes } from \"./operators\"\r\n\r\n// 就是原值改变，计算属性下次也要重新计算，所以在计算属性里面也要进行依赖收集，当原值改变时，会触发effect\r\n// 那么就会走effect收集的scheduler，就会执行相应计算属性的trigger\r\nclass ComputedRefImpl {\r\n    private _dirty = true // 默认取值时不要用缓存\r\n\r\n    public _value\r\n    public effect\r\n    constructor(getter, public setter) { // ts默认不会挂载到this上\r\n        this.effect = effect(getter, {\r\n            lazy: true, // 默认不执行\r\n            scheduler: () => {\r\n                if (!this._dirty) {\r\n                    this._dirty = true\r\n                    trigger(this, TriggerOrTypes.SET, 'value')// 情景1// 修改值会触发原值的effect，然后原值的effect会触发所在的scheduler，就会触发自己的trigger\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    get value() {// 计算属性中也需要收集依赖（2中不会）\r\n        if (this._dirty) {// 取值的时候（maValue.value）才会执行effect\r\n            // console.log('runner');\r\n\r\n            this._value = this.effect()\r\n            this._dirty = false// 变成false，再次取值的时候（myValue.value）不执行effect 缓存\r\n        }\r\n\r\n        track(this, TrackOpTypes.GET, 'value') // 情景1\r\n        return this._value\r\n    }\r\n    set value(newValue) {\r\n        this.setter(newValue) // myValue.value = xx(myValue = computed({get,set}))\r\n    }\r\n}\r\n\r\n// vue3的computed原理与vue2不同\r\nexport function computed(getterOrOptions) {\r\n    let getter\r\n    let setter\r\n\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions\r\n        setter = () => {\r\n            console.warn('computed value must be readonly')\r\n        }\r\n    } else {\r\n        getter = getterOrOptions.get\r\n        setter = getterOrOptions.set\r\n    }\r\n\r\n    return new ComputedRefImpl(getter, setter)\r\n}","// createVNode 创建虚拟节点\r\n\r\nimport { isArray, isObject, isString, ShapeFlags } from \"@vue/shared\"\r\n\r\n// h函数也具有创建虚拟节点的功能\r\n// h('div',{style:{color:red}},'children') h方法和createApp类似，h就是createVnode\r\n\r\nexport function isVnode(vnode) {\r\n    return vnode.__v_isVNode\r\n}\r\n\r\nexport const createVNode = (type, props, children = null) => {\r\n    // 可以根据type来区分是组件还是普通元素,因为h函数会传入字符串'div'，而createApp就会传入一个App组件，children对于组件来说就是一个插槽。\r\n\r\n    // 给虚拟节点加一个类型\r\n    // 用字符串还是对象标识是普通元素还是一个带状态的组件 0就表示啥也不是 1:4:0\r\n    const shapeFlag = isString(type) ? ShapeFlags.ELEMENT : isObject(type) ? ShapeFlags.STATEFUL_COMPONENT : 0\r\n\r\n    const vnode = { // 一个对象来描述相应的内容，虚拟节点具有跨平台的能力\r\n        __v_isVNode: true,// 标识是一个VNode节点\r\n        type,\r\n        props,\r\n        children,\r\n        el: null, //稍后会将虚拟节点和真实节点对应起来，更新可能用得到\r\n        key: props && props.key, // diff算法会用到key\r\n        shapeFlag,// 判断出自己的类型和儿子的类型\r\n        component: null // 存放组件对应的实例\r\n    }\r\n    // 处理儿子类型。因为儿子的情况比较多，可能没有儿子，也可能有一个数组的儿子，所以需要描述儿子的类型。儿子也有可能是文本数组插槽\r\n    normalizeChildren(vnode, children)\r\n    return vnode\r\n}\r\n\r\nfunction normalizeChildren(vnode, children) {\r\n    let type = 0\r\n    if (children == null) {\r\n\r\n    } else if (isArray(children)) {\r\n        type = ShapeFlags.ARRAY_CHILDREN\r\n    } else {\r\n        type = ShapeFlags.TEXT_CHILDREN\r\n    }\r\n    vnode.shapeFlag |= type // 标识自己和儿子的类型\r\n}\r\n\r\n\r\nexport const Text = Symbol('Text')\r\nexport function normalizeVNode(child) {\r\n    if (isObject(child)) return child\r\n\r\n    return createVNode(Text, null, String(child))\r\n}\r\n\r\n","import { createVNode } from \"./vnode\"\r\n\r\nexport function createAppApi(render) {\r\n    return function createApp(rootComponent, rootProps) { // 说明哪个组件哪个属性创建的应用\r\n        \r\n        const app = {\r\n            // 存储\r\n            _props: rootProps,\r\n            _component: rootComponent,\r\n            _container: null,\r\n            mount(container) {// 挂载的目的地\r\n                // let vnode = {}\r\n                // render(vnode,container)\r\n\r\n                // 1.根据组件创建虚拟节点\r\n                // 2.将虚拟节点和容器获取到后调用render方法进行渲染\r\n\r\n                // 虚拟节点\r\n                const vnode = createVNode(rootComponent, rootProps)\r\n                \r\n                // 调用render函数\r\n                render(vnode, container)\r\n\r\n\r\n            }\r\n        }\r\n        return app\r\n    }\r\n}","import { hasOwn } from \"@vue/shared\"\r\n\r\nexport const PublicInstanceProxyHandlers = {\r\n    get({ _: instance }, key) {\r\n        // 取值时要访问 setupState props data\r\n        const { setupState, props, data } = instance\r\n        if (key[0] == '$') {\r\n            return //不能访问 $ 开头的\r\n        }\r\n        if (hasOwn(setupState, key)) {\r\n            return setupState[key]\r\n        } else if (hasOwn(data, key)) {\r\n            return data[key]\r\n        } else if (hasOwn(props, key)) {\r\n            return props[key]\r\n        } else {\r\n            return undefined\r\n        }\r\n    },\r\n    set({ _: instance }, key, value) {\r\n        const { setupState, props, data } = instance\r\n        if (hasOwn(setupState, key)) {\r\n            setupState[key]=value\r\n        } else if (hasOwn(props, key)) {\r\n            props[key]=value\r\n        } else if (hasOwn(data, key)) {\r\n            data[key]=value\r\n        }\r\n        return true\r\n    }\r\n}","import { isFunction, isObject, ShapeFlags } from \"@vue/shared\"\r\nimport { PublicInstanceProxyHandlers } from \"./componentPublicInstance\"\r\n\r\nexport function createComponentInstance(vnode) {\r\n    // webComponent 规定组件要有属性和插槽\r\n\r\n    const instance = {\r\n        vnode,\r\n        type: vnode.type,// type就是创建时候得rootComponent，用户写的对象\r\n        props: {}, //props和attrs的区别 传的参数，接收是props，未接收时attrs？\r\n        attrs: {},\r\n        slots: {},\r\n        ctx: {},\r\n        setupState: {}, // 如果setup返回一个对象，这个对象会作为setupState\r\n        isMounted: false, // 表示这个组件是否挂载过   组件实例启动的标识\r\n        render: null,\r\n        data: { a: 1 }\r\n    }\r\n    instance.ctx = { _: instance } // instance.ctx._ 指向的也是实例，会代理\r\n    return instance\r\n}\r\n\r\nexport function setupComponent(instance) {\r\n    const { props, children } = instance.vnode\r\n\r\n    // 根据props解析出props和attrs，将其放到instance上\r\n    instance.props = props // 判断props和attrs的区别，initProps()\r\n    instance.children = children // 插槽的解析 initSlot()\r\n\r\n    // 需要先看下当前组件是不是有状态的组件，因为有可能是函数组件\r\n\r\n    let isStateful = instance.vnode.shapeFlag & ShapeFlags.STATEFUL_COMPONENT\r\n    if (isStateful) { // 表示现在是一个带状态的组件\r\n        // 调用 当前实例的setup方法，用setup的返回值填充setupState和对应的render\r\n\r\n        setupStatefulComponent(instance)\r\n    }\r\n\r\n}\r\n\r\nfunction setupStatefulComponent(instance) {\r\n    // 1.代理 传递给render函数的参数 不管数据在stateupState、data、props上，统统代理到render（proxy）上，方便取值\r\n    instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers as any)// 为了统一变量，生产环境和开发环境功能不同\r\n\r\n    // 2.获取组件的类型 拿到组件的setup方法\r\n    // type就是创建时候得rootComponent，用户写的对象 App\r\n    let Component = instance.type\r\n    let { setup } = Component\r\n    // debugger\r\n    // --- 没有setup？没有render？---\r\n\r\n    if (setup) {\r\n        // setup的上下文是创造出来的一个新的对象\r\n        let setupContext = createSetupContext(instance)\r\n        const setupResult = setup(instance.props, setupContext)// instance 中 props attrs slots emit expose 会被提取出来，因为在开发的过程中会使用这些属性\r\n        // 判断setup的返回值，有可能是一个函数，有可能是一个对象\r\n        handleSetupResult(instance, setupResult) // setup里的render函数优先成为render函数\r\n\r\n    } else {\r\n        finishComponentSetup(instance) // 完成组件的启动\r\n    }\r\n\r\n\r\n    // Component.render(instance.proxy)\r\n}\r\n\r\nfunction handleSetupResult(instance, setupResult) {\r\n    if (isFunction(setupResult)) {\r\n        instance.render = setupResult\r\n    } else if (isObject(setupResult)) {\r\n        instance.setupState = setupResult\r\n    }\r\n    finishComponentSetup(instance)\r\n}\r\n\r\nfunction finishComponentSetup(instance) {\r\n    // render要不在setup中（setup存在），要不在component（App）中\r\n    let Component = instance.type\r\n    if (!instance.render) {\r\n        // 对template 模板进行编译 产生render函数\r\n        // instance.render=render\r\n        if (!Component.render && Component.template) {\r\n            // 编译template，将结果赋予Component.render\r\n        }\r\n        instance.render = Component.render\r\n    }\r\n\r\n    // 对vue2.x进行兼容处理\r\n    // applyOptions\r\n}\r\n\r\nfunction createSetupContext(instance) {\r\n    return { // instance的一些东西会提取到context中\r\n        attrs: instance.attrs,\r\n        // props: instance.props,\r\n        slots: instance.slots,\r\n        emit: () => { },\r\n        expose: () => { }\r\n    }\r\n}\r\n\r\n\r\n// instance 表示的组件的状态 各种各样的状态，组件的相关信息\r\n// context 就四个参数（生产环境），为了开发时使用\r\n// proxy 主要为了取值方便 -> proxy.xx 代理","\r\nlet queue = []\r\nexport function queueJob(job) { // trigger的scheduler会把当前的effect传过来：effect.options.scheduler(effect)\r\n    // debugger\r\n    if (!queue.includes(job)) { // 去重，向栈里塞effect，\r\n        queue.push(job)\r\n        queueFlush() // 塞一次执行一次，刷新队列\r\n    }\r\n}\r\n\r\nlet isFlushPending = false// 记录是否在刷新中。\r\nfunction queueFlush() {\r\n    if (!isFlushPending) {\r\n        isFlushPending = true // 但只有第一次才会走到这\r\n        Promise.resolve().then(flushJobs) // 异步，全部塞完之后顺序执行effect，并将栈清空\r\n    }\r\n}\r\n\r\nfunction flushJobs() {\r\n    isFlushPending = false\r\n    // 清空时 需要根据调用的顺序依次刷新，保证先刷新父元素再刷新子元素\r\n\r\n    queue.sort((a, b) => a.id - b.id) // 顺序就是先父后子\r\n    // console.log(queue);\r\n    \r\n    for (let i = 0; i < queue.length; i++) {\r\n        const job = queue[i]\r\n        job()\r\n    }\r\n    queue.length = 0\r\n}\r\n","// 贪心算法 + 二分查找\r\n// 如果当前的比结果集中的最后一个大，就插到结果集的最后一个\r\n// 如果比结果集的最后一个小，就插到结果集中第一个比它答的元素的位置，将其替换掉\r\n\r\n\r\n// let arr = [1, 2, 3, 4, 0, 5]\r\n// let arr = [2, 3, 1, 5, 6, 8, 7, 9, 4] // 最长递增子序列\r\n// 值：     1 3 4 6 7 9\r\n// 索引:    2 1 8 4 6 7\r\n// 应为:值: 2 3 5 6 7 9\r\n// 每次放入值的时候，都知道当前   最小的结尾（它前面那个值和索引） ，即使是替换值，就把它要替换的值的最小的结尾（前一个值的索引）告诉他\r\n\r\n\r\nexport function getSequence(arr) { // 最终输出的  索引\r\n    const len = arr.length\r\n    const result = [0] // 索引  递增的序列用二分查找性能高\r\n    let start\r\n    let end\r\n    let middle\r\n    const p = arr.slice(0) // 里面内容无所谓  和原来的数组相同  用来存放索引\r\n    for (let i = 0; i < len; i++) {\r\n        const arrI = arr[i]\r\n        if (arrI !== 0) {\r\n            let resultLastIndex = result[result.length - 1]\r\n            // 取到索引对应的值      ------当前的值比结果集的最后一个数大-------\r\n            if (arr[resultLastIndex] < arrI) {\r\n                p[i] = resultLastIndex // 标记当前前一个对应的索引\r\n                result.push(i)\r\n                continue\r\n            }\r\n\r\n            // 二分查找 找到比当前值大的那一个     ------当前的值比结果集的最后一个数小-------\r\n            start = 0\r\n            end = result.length - 1\r\n            while (start < end) {// 重合就说明找到了对应的值\r\n                middle = ((start + end) / 2) | 0 // Math.floor\r\n\r\n                if (arr[result[middle]] < arrI) {\r\n                    start = middle + 1 // 移动边界\r\n                } else {\r\n                    end = middle // 移动边界\r\n                }\r\n            }\r\n            // 循环结束，start = end，为找到的正确的位置\r\n            if (arrI < arr[result[start]]) { // 如果相同 或者比当前的还大就不换了\r\n\r\n                if (start > 0) { // 只有后面的才记录 替换的是第一个，他前面没有，就不记录\r\n                    p[i] = result[start - 1] // 要将他替换的前一个记住\r\n                }\r\n\r\n                result[start] = i\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    let len1 = result.length // 总的个数\r\n    let last = result[len1 - 1]\r\n    while (len1-- > 0) { // 根据前驱节点一个个向前查找\r\n        result[len1] = last\r\n        last = p[last]\r\n    }\r\n    return result\r\n}\r\n\r\n\r\n// console.log(getSequence([5,3,4,0]));\r\n","import { effect } from \"@vue/reactivity\"\r\nimport { ShapeFlags } from \"@vue/shared\"\r\nimport { createAppApi } from \"./apiCreateApp\"\r\nimport { createComponentInstance, setupComponent } from \"./component\"\r\nimport { queueJob } from \"./scheduler\"\r\nimport { normalizeVNode, Text } from \"./vnode\"\r\nimport { getSequence } from './getSequence'\r\n\r\nexport function createRenderer(rendererOptions) {\r\n\r\n    const {\r\n        insert: hostInsert,\r\n        remove: hostRemove,\r\n        patchProp: hostPatchProp,\r\n        createElement: hostCreateElement,\r\n        createText: hostCreateText,\r\n        setText: hostSetText,\r\n        setElementText: hostSetElementText,\r\n        nextSibling: hostNextSibling,\r\n    } = rendererOptions\r\n\r\n    //#region -----------------------组件↓-----------------------------\r\n    const setupRenderEffect = (instance, container) => {\r\n        // 需要创建一个effect，在effect中调用render方法，这样render方法中拿到的数据会收集这个effect，属性更新的时候effect会重新执行。\r\n        // debugger\r\n        effect(function componentEffect() {\r\n            // 每个组件都有一个effect，vue3是组件级更新，数据变化会重新执行对应组件的effect\r\n            if (!instance.isMounted) {\r\n                // 初次渲染\r\n                let proxyToUse = instance.proxy// 代理对象\r\n                // $vnode   _vnode\r\n                // vnode    subTree\r\n                // 组件     组件的渲染内容\r\n                let subTree = instance.subTree = instance.render.call(proxyToUse, proxyToUse)// 在render函数中用到了proxy的某个属性，当此属性已更新，就会重新执行\r\n                // 用render的返回值h(xxx,xxx)继续渲染\r\n                patch(null, subTree, container)\r\n\r\n                instance.isMounted = true\r\n\r\n            } else {\r\n                // 更新逻辑\r\n                // console.log('更新');\r\n                \r\n                const prevTree = instance.subTree\r\n                let proxyToUse = instance.proxy\r\n                const nextTree = instance.render.call(proxyToUse, proxyToUse)\r\n                // console.log(prevTree, nextTree);\r\n                //组件级更新还有点问题\r\n                \r\n                patch(prevTree, nextTree, container) // 组件级更新，更新组件内部的内容元素element 属性更新更新组件\r\n\r\n            }\r\n        }, {\r\n            scheduler: queueJob // 只有trigger的时候，才会条件触发scheduler\r\n        })\r\n\r\n\r\n    }\r\n\r\n    const mountComponent = (initialVNode, container) => {\r\n        // 组件的渲染流程 最核心的就是调用setup拿到返回值，获取render函数返回的结果进行渲染\r\n\r\n        // 1.先有实例 根据虚拟节点创建一个实例挂载到虚拟节点上\r\n        // 组件中所有的方法存放在component.ts中\r\n        const instance = (initialVNode.component = createComponentInstance(initialVNode))\r\n        // 2.需要的数据解析到实例上\r\n        setupComponent(instance)\r\n        // 3.创建一个effect，让render执行\r\n        setupRenderEffect(instance, container)\r\n\r\n\r\n    }\r\n\r\n    const processComponent = (n1, n2, container) => {\r\n        // 判断是初始化还是更新节点\r\n        if (n1 == null) { // 组件没有上一次的虚拟节点\r\n            mountComponent(n2, container)\r\n        } else {\r\n            // 组件更新流程\r\n        }\r\n    }\r\n    //#endregion ------------------------------组件↑------------------------\r\n\r\n\r\n\r\n    //#region ------------------------------元素↓------------------------\r\n\r\n    const mountChildren = (children, container) => {\r\n        for (let i = 0; i < children.length; i++) {\r\n            // 创建不同的虚拟节点进行多文本内容的处理  如果是元素就直接返回，走挂载元素\r\n            let child = (children[i]=normalizeVNode(children[i]))// 有可能都是文本，那么就会被覆盖，处理方法就是将其转换为虚拟节点。\r\n            // debugger\r\n            // console.log(child);\r\n            // 一定要改children[i],不然无法关联\r\n            patch(null, child, container)\r\n        }\r\n    }\r\n\r\n    const mountElement = (vnode, container, anchor = null) => {\r\n        // 递归渲染\r\n        const { props, shapeFlag, type, children } = vnode\r\n        let el = (vnode.el = hostCreateElement(type))\r\n\r\n        if (props) {\r\n            for (const key in props) {\r\n                hostPatchProp(el, key, null, props[key])\r\n            }\r\n        }\r\n        // 处理儿子\r\n        if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {\r\n            hostSetElementText(el, children)// 文本直接放进去\r\n        } else if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) { // 多个儿子:['aaa','bbb']\r\n            // console.log(children);\r\n            // debugger\r\n            mountChildren(children, el)\r\n        }\r\n\r\n        hostInsert(el, container, anchor)\r\n    }\r\n\r\n    const patchProps = (oldProps, newProps, el) => {\r\n        if (oldProps !== newProps) {\r\n            // 先把新的属性弄到老的属性上\r\n            for (let key in newProps) {\r\n                const prev = oldProps[key]\r\n                const next = newProps[key]\r\n                if (prev !== next) {\r\n                    hostPatchProp(el, key, prev, next)\r\n                }\r\n            }\r\n\r\n            // 再把新的没有的从老的上删除 比较老的中有但是新的中没有的key\r\n            for (const key in oldProps) {\r\n                if (!(key in newProps)) {\r\n                    hostPatchProp(el, key, oldProps[key], null)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const unmountChildren = (children) => {\r\n        for (let i = 0; i < children.length; i++) {\r\n            unmount(children[i])\r\n        }\r\n    }\r\n\r\n    const patchKeyedChildren = (c1, c2, el) => {\r\n        // Vue3 对特殊情况进行优化\r\n\r\n        let i = 0// 默认从头开始对比\r\n        let e1 = c1.length - 1\r\n        let e2 = c2.length - 1\r\n\r\n        // 尽可能减少比对的区域\r\n\r\n        // 1.sync from start 从头开始一个个比，遇到不同的就停止 a b c d e // a b d e\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[i]\r\n            const n2 = c2[i]\r\n            if (isSameVNodeType(n1, n2)) {\r\n                // 深度遍历，遍历属性和孩子\r\n                patch(n1, n2, el)\r\n            } else {\r\n                break\r\n            }\r\n\r\n            i++\r\n        }\r\n\r\n        // 2.sync from end 从后面开始比 a b c / d e b c\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[e1]\r\n            const n2 = c2[e2]\r\n            if (isSameVNodeType(n1, n2)) {\r\n                // 深度遍历，遍历属性和孩子\r\n                patch(n1, n2, el)\r\n            } else {\r\n                break\r\n            }\r\n            e1--\r\n            e2--\r\n        }\r\n\r\n        // 3.common sequence + mount\r\n        // 比较后 有一方已经完全对比完成了\r\n        // 确定是否是挂载\r\n\r\n        // 如果 完成后，最终i的值大于e1， 说明老的少新的多 挂载------------------\r\n\r\n        if (i > e1) { //老的少 新的多   --------前提都是有一方已经比对完成了------------多的是从i到e2的部分\r\n            if (i <= e2) {// 表示有新增的部分\r\n                // 找参照物\r\n                const nextPos = e2 + 1\r\n                // 判断是向前插入，还是向后插入\r\n                const anchor = nextPos < c2.length ? c2[nextPos].el : null\r\n                // 找到参照物后，从头（尾）开始每个插到前面去\r\n\r\n                while (i <= e2) {\r\n                    patch(null, c2[i], el, anchor)\r\n\r\n                    i++\r\n                }\r\n            }\r\n        } else if (i > e2) {// 老的多，新的少\r\n            while (i <= e1) {\r\n                unmount(c1[i])\r\n                i++\r\n            }\r\n        } else {\r\n            // 乱序比较，需要尽可能的复用\r\n            // 用新的元素做成一个映射表去老的里找，一样的就复用，不一样的要不插入，要不删除\r\n\r\n            let s1 = i\r\n            let s2 = i\r\n\r\n            // 数组做映射，用老的去新的映射里面查找的时候，会将老的里有的在映射表里做标记\r\n            const toBePatched = e2 - s2 + 1\r\n            const newIndexToOldIndexMap = new Array(toBePatched).fill(0)\r\n\r\n\r\n\r\n            // vue3 用的是新的做映射表  vue2用的是老的做映射表\r\n            const keyToNewIndexMap = new Map()\r\n\r\n            for (let i = s2; i <= e2; i++) {\r\n                const childVNode = c2[i] // child\r\n                keyToNewIndexMap.set(childVNode.key, i)\r\n            }\r\n\r\n            // 去老的里面查找，看有没有复用的\r\n            for (let i = s1; i <= e1; i++) {\r\n                const oldVNode = c1[i]\r\n                let newIndex = keyToNewIndexMap.get(oldVNode.key)\r\n                if (newIndex === undefined) {// 老的里的不在新的里面\r\n                    unmount(oldVNode)\r\n                } else { // 新老的比对,比较完后位置有差异\r\n                    // 新的和旧的关系，索引的关系\r\n                    // 老的里有的会标记上，老的里没有，新的里有的，还是0\r\n                    newIndexToOldIndexMap[newIndex - s2] = i + 1\r\n                    patch(oldVNode, c2[newIndex], el) // patch操作会复用元素 更新属性 比较孩子\r\n                }\r\n            }\r\n\r\n            // 最后移动节点，将新增的节点插入\r\n\r\n            let increasingNewIndexSequence = getSequence(newIndexToOldIndexMap)\r\n            let j = increasingNewIndexSequence.length - 1 // 取出最后一个人的索引\r\n            for (let i = toBePatched - 1; i >= 0; i--) {\r\n                let currentIndex = i + s2 // 找到h（要新增的节点）的索引\r\n                let child = c2[currentIndex] // 找到h对应的节点\r\n                let anchor = currentIndex + 1 < c2.length ? c2[currentIndex + 1].el : null\r\n                // 第一次插入h后。。\r\n\r\n                if (newIndexToOldIndexMap[i] == 0) {// 如果是0，说明没有被patch过\r\n                    patch(null, child, el, anchor)\r\n                } else {\r\n                    // [1,2,3,4,5,6]\r\n                    // [1,6,2,3,4,5]\r\n                    // 这样会把所有的节点都移动一遍  希望尽可能的少移动\r\n                    // hostInsert(child.el,el,anchor) // 操作当前的d，以d下一个作为参照物插入（移动位置）\r\n\r\n                    // 3 2 1 0\r\n                    // [1,2]\r\n                    if (i != increasingNewIndexSequence[j]) {\r\n                        hostInsert(child.el, el, anchor) // 操作当前的d，以d下一个作为参照物插入（移动位置）\r\n                    } else {\r\n                        j-- // 跳过不需要移动的元素\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n            // 最长递增子序列\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const patchChildren = (n1, n2, el) => {// el:父节点\r\n        // console.log(n1,n2,el);\r\n        \r\n        const c1 = n1.children // 新老儿子\r\n        const c2 = n2.children\r\n        // console.log(c1);\r\n        \r\n        // 共有如下几种情况\r\n        // 老的有儿子，新的没儿子   老的没儿子新的有儿子   新老都有儿子    新老都是文本\r\n\r\n        const prevShapeFlag = n1.shapeFlag// 分别标识儿子的状况\r\n        const shapeFlag = n2.shapeFlag\r\n\r\n        // 现在是文本\r\n        if (shapeFlag & ShapeFlags.TEXT_CHILDREN) {\r\n            // 1.老的是数组，但是新的是文本\r\n            if (prevShapeFlag & ShapeFlags.ARRAY_CHILDREN) {\r\n                // debugger\r\n                unmountChildren(c1) // 如果c1中包含组件会调用组件的销毁方法 c1???老节点的儿子。\r\n            }\r\n\r\n            // 2.两个都是文本\r\n            if (c2 !== c1) {\r\n                hostSetElementText(el, c2)\r\n            }\r\n        } else {\r\n            // 现在是元素   上一次有可能是文本 或者数组\r\n            // debugger\r\n            if (prevShapeFlag & ShapeFlags.ARRAY_CHILDREN) {\r\n                // 3.老的是数组，新的是数组\r\n                if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {// 一个元素也会包装成数组 有可能是null？\r\n                    // 当前是数组 之前是数组\r\n                    // 两个数组的对比 -> diff算法--------\r\n\r\n                    patchKeyedChildren(c1, c2, el)\r\n\r\n\r\n                   \r\n                } else { // 4.老的是数组，新的不是数组\r\n                    // 没有孩子 特殊情况 当前是null，删掉老的--------------------------------\r\n                    unmountChildren(c1)\r\n                }\r\n            } else {\r\n                // 上一次是文本\r\n                // 5.上一次是文本\r\n                if (prevShapeFlag & ShapeFlags.TEXT_CHILDREN) {\r\n                    hostSetElementText(el, '')\r\n                }\r\n                //，现在是数组\r\n                if (shapeFlag & ShapeFlags.ARRAY_CHILDREN) {\r\n                    mountChildren(c2, el)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const patchElement = (n1, n2, container) => {\r\n        // 走到这里说明元素是相同节点\r\n\r\n        // 复用元素节点\r\n        let el = (n2.el = n1.el)\r\n        // 更新属性，更新儿子\r\n        const oldProps = n1.props || {}\r\n        const newProps = n2.props || {}\r\n\r\n        patchProps(oldProps, newProps, el)\r\n\r\n        patchChildren(n1, n2, el)\r\n    }\r\n\r\n    const processElement = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            mountElement(n2, container, anchor)\r\n        } else {\r\n            // 元素更新\r\n            patchElement(n1, n2, container)\r\n\r\n        }\r\n    }\r\n\r\n    //#endregion ------------------------------元素↑------------------------\r\n\r\n    // #region 文本\r\n    const processText = (n1, n2, container) => {\r\n        if (n1 == null) {\r\n            // console.log(n1,n2);\r\n            // 创建真实文本节点，需要文本内容，而n2只是一个为了不让两次覆盖掉的中间处理\r\n            hostInsert((n2.el = hostCreateText(n2.children)), container)// 虚拟节点的children上存放的是文本内容 将其转换为文本元素，放在n2的el上\r\n\r\n        }\r\n    }\r\n    // #endregion\r\n\r\n    const isSameVNodeType = (n1, n2) => { // 如果两个元素标签不一样，直接删除前一个生成新的替换\r\n        return n1.type === n2.type && n1.key === n2.key\r\n    }\r\n\r\n    const unmount = (n1) => {// 如果是组件，调用组件的生命周期\r\n        // debugger\r\n        console.log(n1.el);\r\n        \r\n        hostRemove(n1.el)\r\n\r\n    }\r\n\r\n\r\n    // 执行核心\r\n    const patch = (n1, n2, container, anchor = null) => {\r\n        // 针对不同类型，做初始化操作\r\n\r\n        const { shapeFlag, type } = n2\r\n\r\n        // 组件更新\r\n        if (n1 && !isSameVNodeType(n1, n2)) { // 如果两个元素标签不一样，直接删除前一个生成新的替换\r\n            // anchor是为了替换元素找位置时的锚定\r\n            anchor = hostNextSibling(n1.el)\r\n            // n1,n2不是一个类型，就把n1删掉，换成n2\r\n            unmount(n1)\r\n            n1 = null// n1置null，n2不为null，n2走创建流程\r\n\r\n        }\r\n\r\n        switch (type) {\r\n            case Text: processText(n1, n2, container)\r\n                break\r\n            default:\r\n                if (shapeFlag & ShapeFlags.ELEMENT) { // 元素\r\n                    processElement(n1, n2, container, anchor);\r\n\r\n                } else if (shapeFlag & ShapeFlags.STATEFUL_COMPONENT) { // 组件\r\n                    processComponent(n1, n2, container)\r\n\r\n                }\r\n                break\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    // render方法的作用是渲染一个虚拟节点，将这个虚拟节点挂载到具体的dom元素上，与mount类似？\r\n    const render = (vnode, container) => {\r\n        // core的核心\r\n\r\n        // 默认调用render，可能是初始化流程   \r\n        // 先用App 和属性生成一个虚拟节点（组件），调用mounted，render执行，h执行生成又一个虚拟节点（元素）\r\n        patch(null, vnode, container)\r\n\r\n    }\r\n    return {\r\n        createApp: createAppApi(render)\r\n    }\r\n}","import { isArray, isObject } from \"@vue/shared\"\r\nimport { createVNode, isVnode } from \"./vnode\"\r\n\r\nexport function h(type, propsOrChildren, children) {\r\n    const l = arguments.length // 孩子节点要么是字符串，要么是数组   针对的是createVnode（因为有可能写的时候是hcreateVnode的）\r\n\r\n    if (l == 2) { // 类型 + 属性   类型 + 孩子\r\n        // 如果propsOrChildren 是数组，就是孩子，直接作为第三个参数\r\n        if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {\r\n            if (isVnode(propsOrChildren)) {\r\n                return createVNode(type, null, [propsOrChildren]) // return h('div',h('span'))\r\n            }\r\n            return createVNode(type, propsOrChildren)\r\n        } else {\r\n            // 如果第二个参数不是对象，那一定是孩子\r\n            return createVNode(type, null, propsOrChildren)\r\n        }\r\n    } else {\r\n        if (l > 3) {\r\n            children = Array.prototype.slice.call(arguments, 2)\r\n        } else if (l === 3 && isVnode(children)) {\r\n            children = [children]\r\n        }\r\n        return createVNode(type, propsOrChildren, children)\r\n    }\r\n\r\n}","export const nodeOps = {\r\n    // createElement,不同的平台创建元素的方式不同\r\n    // 现只考虑浏览器\r\n\r\n    createElement: tagName => document.createElement(tagName),// 增加\r\n    remove: child => { // 删除\r\n        const parent = child.parentNode\r\n        if (parent) {\r\n            parent.removeChild(child)\r\n        }\r\n    },\r\n    insert: (child, parent, anchor = null) => { // 插入\r\n        parent.insertBefore(child, anchor) // 如果参照物为空，则相当于appendChild\r\n    },\r\n    querySelector: selector => document.querySelector(selector),// 查找\r\n    setElementText: (el, text) => el.textContent = text, // 设置元素的内容 innerHTML有隐患\r\n\r\n    // 文本操作 创建文本\r\n    createText: text => document.createTextNode(text),\r\n    setText: (node, text) => node.nodeValue = text,\r\n    nextSibling: (node) => node.nextSibling\r\n\r\n    // textContent是元素的内容，nodeValue是文本节点的内容\r\n}","export const patchAttr = (el: Element, key, value) => {\r\n    if (value == null) {\r\n        el.removeAttribute(key)\r\n    } else {\r\n        el.setAttribute(key,value)\r\n    }\r\n}","export const patchClass = (el: Element, value) => {// 不需要prevValue，直接把next的值给上就好\r\n    if (value == null) {\r\n        el.removeAttribute('class')\r\n    } else {\r\n        el.className = value\r\n    }\r\n\r\n}","/*\r\n    1.给元素缓存一个绑定事件的列表\r\n    2.如果前后都有，直接改变invoke中的value中value属性指向最新的事件即可\r\n    3.如果以前缓存中没有缓存过的，而且value有值，需要绑定方法，并且缓存起来\r\n    4.如果以前绑定过需要删除，解绑事件，删除缓存\r\n\r\n*/\r\n\r\nexport const patchEvent = (el, key, value) => {// vue指令 添加和删除 key:onClick??\r\n    // 对函数的缓存\r\n    const invokers = el._vei || (el._vei = {})// vueEvensInvoker\r\n\r\n    const exists = invokers[key]//是否存在\r\n    if (value && exists) { //如果需要绑定事件且存在\r\n        exists.value = value\r\n    } else {\r\n        const eventName = key.slice(2).toLowerCase()// 前两个是on，不需要\r\n\r\n        if (value) {// 要绑定事件 以前没有绑定过\r\n            let invoker = invokers[key] = createInvoker(value)//?invoke[key]??\r\n            el.addEventListener(eventName, invoker)\r\n        } else {// 以前绑定了 但是没有value\r\n            el.removeEventListener(eventName, exists)\r\n            invokers[key] = undefined//??key??\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nfunction createInvoker(value) {\r\n    const invoker = (e) => {\r\n        invoker.value(e)\r\n    }\r\n    invoker.value = value // 为了能够随时更改value属性\r\n    return invoker\r\n}\r\n\r\n/*\r\n    一个元素绑定事件 addEventListener（fn1）addEventListener（fn1）\r\n    比如 div @click=fn 后：div @click=fn1\r\n    （）=>value()，修改value的值\r\n    或者原来有，后来没有这个事件了\r\n    对事件进行缓存\r\n*/","export const patchStyle = (el: Element, prev, next) => {\r\n    const style = (el as HTMLElement).style // 获取样式\r\n    if (next == null) {\r\n        el.removeAttribute('style') //{style:{color} } {style:{} }\r\n    } else {\r\n        // render里面的style传的是一个对象，不能随便替换\r\n\r\n        // 老的里有新的里没有\r\n        if (prev) {\r\n            for (let key in prev) {\r\n                if (next[key] == null) {\r\n                    style[key] = '' //老的里有新的里没有需要删除\r\n                }\r\n            }\r\n        }\r\n\r\n        // 新的里面的需要添加到style上\r\n        for (let key in next) {\r\n            style[key] = next[key]\r\n        }\r\n\r\n    }\r\n\r\n}","// 这里面针对的是属性操作，一系列的属性操作\r\n\r\nimport { patchAttr } from \"./modules/attr\"\r\nimport { patchClass } from \"./modules/class\"\r\nimport { patchEvent } from \"./modules/events\"\r\nimport { patchStyle } from \"./modules/style\"\r\n\r\nexport const patchProp = (el, key, prevValue, nextValue) => {\r\n    switch (key) {\r\n        case 'class': // 对比属性\r\n            patchClass(el, nextValue)\r\n            break\r\n        case 'style':\r\n            patchStyle(el,prevValue,nextValue)\r\n            break\r\n        default:\r\n            if (/^on[^a-z]/.test(key)) { // on1 onA都可以\r\n                patchEvent(el,key,nextValue) // 添加 删除 修改\r\n            } else { // 如果不是事件，才是属性\r\n                patchAttr(el, key, nextValue)\r\n            }\r\n            break\r\n    }\r\n}","// runtime-dom的核心就是  提供domAPI方法\r\n// 操作节点、操作属性的更新\r\n\r\nimport { createRenderer } from \"@vue/runtime-core\";\r\nimport { extend } from \"@vue/shared\";\r\nimport { nodeOps } from \"./nodeOps\";// 对象\r\nimport { patchProp } from \"./patchProps\";// 方法\r\n\r\n// 节点操作就是增删改查\r\n// 属性操作就是 添加 删除 更新 （样式、类、事件、其他属性）\r\n\r\n// 渲染时用到的所有方法\r\nexport const rendererOptions = extend({ patchProp }, nodeOps)// 一个是方法，一个是对象，通过extend合并起来。（Object.assign）\r\n\r\n// 用户调用的是runtime-dom --> runtime-core\r\n// runtime-dom 是为了解决平台差异\r\n\r\n// 迁移到core\r\n// function createRenderer(rendererOptions) {\r\n//     return {\r\n//         createApp(rootComponent, rootProps) {\r\n//             const app = {\r\n//                 mount(container) {\r\n//                     console.log(container,rootComponent,rootProps,rendererOptions);\r\n                    \r\n//                 }\r\n//             }\r\n//             return app\r\n//         }\r\n//     }\r\n// }\r\n\r\n// Vue中runtime-core提供了核心的方法，用来处理渲染，他会使用runtime-dom中的api进行渲染\r\n// 把dom层和core层进行分割\r\nexport function createApp(rootComponent, rootProps = null) {\r\n    \r\n    // debugger // 两个cerateApp只是为了语义化，外面的这个会调用里面的createApp\r\n    const app = createRenderer(rendererOptions).createApp(rootComponent, rootProps)// core\r\n    let { mount } = app\r\n    app.mount = function (container) {\r\n        // 清空容器的操作\r\n        container = nodeOps.querySelector(container)\r\n        container.innerHTML = ''\r\n        mount(container)// 函数劫持 core\r\n        // 将组件渲染成dom元素进行挂载\r\n    }\r\n\r\n    return app\r\n}\r\n\r\nexport * from '@vue/runtime-core'\r\n\r\n"],"names":[],"mappings":"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"}